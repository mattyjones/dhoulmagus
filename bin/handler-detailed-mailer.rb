#! /usr/bin/env ruby

require 'sensu-handler'
require 'dhoulmagus/version'
require 'mail'
require 'timeout'
require 'socket'
require 'erb'

# patch to fix Exim delivery_method: https://github.com/mikel/mail/pull/546
module ::Mail
  class Exim < Sendmail
    def self.call(path, arguments, _destinations, encoded_message)
      popen "#{path} #{arguments}" do |io|
        io.puts encoded_message.to_lf
        io.flush
      end
    end
  end
end

class DetailedMailer < Sensu::Handler
  # Acquires the mail settings from a json file dropped via Chef
  #
  # These settings will set who the mail should be set to along with any
  # necessary snmtp settings.  All can be overridden in the local Vagrantfile
  #
  # @param name [string] the mail settings to use
  # @return [string] the configuration string
  def get_setting(name)
    settings['devops-mailer'][name]
  end

  # Calculate the duration the check has been it its current state
  # @return [string] the length of time a check has been in its current state
  def define_check_state_duration
    ''
  end

  # Define a short name for the alert to be used in log files
  #
  # This will be used in log files to track the execution of the mailer
  # It can currently be found in `/var/log/sensu/sensu-server.log`
  #
  # @return [string] a string consisting of the device being alerted on and the check name
  def short_name
    "#{@sensu_config['monitored_instance']}/#{@sensu_config['check_name']}"
  end

  # Define the type of alert this is
  #
  # This will be used in both the email subject and in the `Notification Type:` field
  #
  # @return [string] the alert type
  def define_notification_type
    case @event['action']
    when 'resolve'
      return 'CLEAR'
    when 'create'
      return 'ALERT'
    when 'flapping'
      return 'FLAPPING'
    else
      return 'NOTICE'
    end
  end

  # Convert the integer value given by Sensu into a text string
  #
  # This will be used in both the email subject and in the `Check State:` field
  #
  # @param name [string] the mail settings to use
  # @return [string] The status of the check
  def define_status
    case @event['check']['status']
    when 0
      return 'OK'
    when 1
      return 'WARNING'
    when 2
      return 'CRITICAL'
    when 3
      return 'UNKNOWN'
    when 127
      return 'CONFIG ERROR'
    else
      return 'ERROR'
    end
  end

  # Define the operating environment of the device being monitored
  #
  # This is not where the server is located, but where the client is located.
  # The client could be sending its checks to any regin/cluster/env so we need
  # to know where the actual device is located
  #
  # @return [string] The environemnt the client is associated with
  def define_sensu_env
    sensu_server = Socket.gethostname
    if sensu_server.match(/^prd/)
      return 'Prod: '
    elsif sensu_server.match(/^dev/)
      return 'Dev: '
    elsif sensu_server.match(/^FOO/)
      return 'Stg: '
    elsif sensu_server.match(/^BAR/)
      return 'KitchenCI: '
    elsif sensu_server.match(/^vagrant/)
      return 'Vagrant: '
    else
      return 'Test: '
    end
  end

  # Define the source of the email
  #
  # The email could be generated by any number of applications using its api,
  # each application needs to be defined here for filtering purposes
  #
  # @return [string] The application interacting with the mailer
  def define_source
    'sensu'
  end

  # Define all erb template variables
  #
  # This will determine what values to calculate for the templates
  #
  # @param name [string] the source application
  # @return [hash] All values to be dropped into the email template
  def template_vars(source)
    case source
    when 'sensu'
      @sensu_config = {
        'monitored_instance'    => @event['client']['name'], # this will be the snmp host if using traps
        'sensu_client'          => @event['client']['name'],
        'incident_timestamp'    => Time.at(@event['check']['issued']),
        'instance_address'      => @event['client']['address'],
        'check_name'            => @event['check']['name'],
        'check_state'           => define_status,
        'check_data'            => '', # any additional user supplied data
        'notification_comment'  => '', # the comment added to a check to silence it
        'notification_author'   => '', # the user that silenced the check
        'check_output'          => @event['check']['output'],
        'sensu_env'             => define_sensu_env,
        'notification_type'     => define_notification_type,
        'check_state_duration'  => define_check_state_duration,
        'mail_template'         => "#{@template_path}/sensu/base_email.erb"
      }
      @mail_subject = "#{define_sensu_env} #{define_notification_type}  #{@sensu_config['check_name']} on #{@sensu_config['monitored_instance']} is #{@sensu_config['check_state']}"
    end
  end

  # Create the email and ship it
  def handle
    ######################
    #                    #
    # smtp mail settings #
    #                    #
    ######################
    mail_to                   = get_setting('mail_to')
    mail_from                 = get_setting('mail_from')

    delivery_method           = get_setting('delivery_method') || 'smtp'
    smtp_address              = get_setting('smtp_address') || 'localhost'
    smtp_port                 = get_setting('smtp_port') || '25'
    smtp_domain               = get_setting('smtp_domain') || 'localhost.localdomain'

    smtp_username             = get_setting('smtp_username') || nil
    smtp_password             = get_setting('smtp_password') || nil
    smtp_authentication       = get_setting('smtp_authentication') || :plain
    smtp_enable_starttls_auto = get_setting('smtp_enable_starttls_auto') == 'false' ? false : true

    # set the source application to define the proper template variables
    source = define_source

    ###################################
    #                                 #
    # create and render the email msg #
    #                                 #
    ###################################
    gem_base = `/opt/sensu/embedded/bin/gem environment gemdir`.gsub("\n", '')
    @template_path = "#{gem_base}/gems/dhoulmagus-#{Dhoulmagus::Version::STRING}/templates"
    template_vars(source)
    renderer = ERB.new(File.read(@sensu_config['mail_template']))
    msg = renderer.result(binding)

    #####################################
    #                                   #
    # deliver the email and log it to   #
    # /var/log/sensu/sensu-server       #
    #                                   #
    #####################################
    Mail.defaults do
      delivery_options = {
        address: smtp_address,
        port: smtp_port,
        domain: smtp_domain,
        openssl_verify_mode: 'none',
        enable_starttls_auto: smtp_enable_starttls_auto
      }

      unless smtp_username.nil?
        auth_options = {
          user_name: smtp_username,
          password: smtp_password,
          authentication: smtp_authentication
        }
        delivery_options.merge! auth_options
      end

      delivery_method delivery_method.intern, delivery_options
    end

    begin
      timeout 10 do
        Mail.deliver do
          to mail_to
          from mail_from
          subject @mail_subject
          content_type 'text/html; charset=UTF-8'
          body msg
        end

        puts 'mail -- sent alert for ' + short_name + ' to ' + mail_to.to_s
      end
    rescue Timeout::Error
      puts 'mail -- timed out while attempting to ' + define_notification_type + ' an incident -- ' + short_name
    end
  end
end
